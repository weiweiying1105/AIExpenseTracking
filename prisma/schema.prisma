// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 小程序用户模型
model User {
  id          String   @id @default(cuid())
  openId      String   @unique // 微信小程序 openId
  unionId     String?  @unique // 微信 unionId (可选)
  nickName    String?  // 用户昵称
  avatarUrl   String?  // 头像URL
  gender      Int?     // 性别 0-未知 1-男 2-女
  city        String?  // 城市
  province    String?  // 省份
  country     String?  // 国家
  language    String?  // 语言
  
  // 用户设置
  currency    String   @default("CNY") // 默认货币
  timezone    String   @default("Asia/Shanghai") // 时区
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime @default(now())
  
  // 关联数据
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]
  chatSessions ChatSession[]
  preferences  UserPreference?
  expenses     Expense[]
  
  @@map("users")
}

// 交易记录模型
model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal         @db.Decimal(12, 2) // 金额，支持大数值
  description String          // 描述
  type        TransactionType // 收入/支出
  date        DateTime        @default(now()) // 交易日期
  
  // 分类信息
  categoryId  String?
  category    Category?       @relation(fields: [categoryId], references: [id])
  
  // 位置信息（小程序可获取）
  location    String?         // 位置描述
  latitude    Float?          // 纬度
  longitude   Float?          // 经度
  
  // 图片附件
  imageUrls   String[]        // 票据图片URLs
  
  // OpenAI相关字段
  aiAnalyzed  Boolean         @default(false) // 是否已AI分析
  aiCategory  String?         // AI推荐分类
  aiTags      String[]        // AI提取的标签
  aiConfidence Float?         // AI分析置信度 (0-1)
  openaiModel String?         // 使用的OpenAI模型版本
  aiPromptTokens Int?         // 消耗的prompt tokens
  aiCompletionTokens Int?     // 消耗的completion tokens
  
  // 时间戳
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // 关联用户
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
  @@index([userId, date])
  @@index([userId, type])
  @@index([categoryId])
}

// 分类模型
model Category {
  id          String   @id @default(cuid())
  name        String   // 分类名称
  icon        String?  // 图标
  color       String?  // 颜色
  type        TransactionType // 收入/支出分类
  isDefault   Boolean  @default(false) // 是否为系统默认分类
  sortOrder   Int      @default(0) // 排序
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联数据
  userId      String?  // null表示系统默认分类
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  expenses    Expense[]
  
  @@map("categories")
  @@unique([userId, name, type])
}

// 预算模型
model Budget {
  id          String      @id @default(cuid())
  name        String      // 预算名称
  amount      Decimal     @db.Decimal(12, 2) // 预算金额
  period      BudgetPeriod // 预算周期
  startDate   DateTime    // 开始日期
  endDate     DateTime    // 结束日期
  
  // 分类限制（可选）
  categoryIds String[]    // 限制的分类ID数组
  
  // 提醒设置
  alertThreshold Float   @default(0.8) // 提醒阈值（80%）
  isActive    Boolean     @default(true)
  
  // 时间戳
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // 关联用户
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("budgets")
}

// OpenAI聊天会话记录
model ChatSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique // 会话ID
  userId      String   // 用户ID
  
  // OpenAI相关配置
  model       String   @default("gpt-3.5-turbo") // OpenAI模型
  temperature Float    @default(0.7) // 温度参数
  maxTokens   Int      @default(1000) // 最大token数
  
  // 会话状态
  isActive    Boolean  @default(true)
  totalTokens Int      @default(0) // 总消耗tokens
  messageCount Int     @default(0) // 消息数量
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime // 会话过期时间
  
  // 关联数据
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]
  
  @@map("chat_sessions")
  @@index([userId])
  @@index([sessionId])
}

// OpenAI聊天消息记录
model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String      // 会话ID
  role        MessageRole // 消息角色
  content     String      // 消息内容
  
  // OpenAI相关信息
  promptTokens Int?       // prompt tokens
  completionTokens Int?   // completion tokens
  totalTokens Int?        // 总tokens
  finishReason String?    // 完成原因
  
  // 功能相关
  functionCall Json?      // 函数调用信息
  toolCalls   Json?       // 工具调用信息
  
  // 时间戳
  createdAt   DateTime    @default(now())
  
  // 关联会话
  session     ChatSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  
  @@map("chat_messages")
  @@index([sessionId, createdAt])
}

// 用户偏好设置
model UserPreference {
  id          String   @id @default(cuid())
  userId      String   @unique
  
  // 界面设置
  theme       String   @default("light") // 主题
  language    String   @default("zh-CN") // 语言
  
  // AI功能设置
  autoCategory Boolean @default(true)  // 自动分类
  aiSuggestion Boolean @default(true)  // AI建议
  openaiModel String  @default("gpt-3.5-turbo") // 默认OpenAI模型
  aiTemperature Float @default(0.7)   // AI温度参数
  
  // 其他功能设置
  locationTrack Boolean @default(false) // 位置追踪
  
  // 通知设置
  budgetAlert Boolean  @default(true)  // 预算提醒
  dailyReminder Boolean @default(false) // 每日提醒
  
  // 其他设置
  settings    Json?    // 其他自定义设置
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 关联用户
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// API使用统计
model ApiUsage {
  id          String   @id @default(cuid())
  userId      String   // 用户ID
  date        DateTime @default(now()) @db.Date // 日期
  
  // OpenAI使用统计
  openaiCalls Int      @default(0) // API调用次数
  promptTokens Int     @default(0) // prompt tokens
  completionTokens Int @default(0) // completion tokens
  totalTokens Int      @default(0) // 总tokens
  cost        Decimal  @default(0) @db.Decimal(10, 6) // 成本（美元）
  
  // 功能使用统计
  chatMessages Int     @default(0) // 聊天消息数
  aiAnalysis  Int      @default(0) // AI分析次数
  imageAnalysis Int    @default(0) // 图片分析次数
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("api_usage")
  @@unique([userId, date])
  @@index([userId])
  @@index([date])
}

// 枚举定义
enum TransactionType {
  INCOME  // 收入
  EXPENSE // 支出
}

enum BudgetPeriod {
  DAILY   // 日预算
  WEEKLY  // 周预算
  MONTHLY // 月预算
  YEARLY  // 年预算
}

enum MessageRole {
  SYSTEM    // 系统消息
  USER      // 用户消息
  ASSISTANT // AI助手消息
  FUNCTION  // 函数调用消息
  TOOL      // 工具调用消息
}


model Expense {
  id          Int       @id @default(autoincrement())
  amount      Decimal
  description String?
  currency    String    @default("CNY")
  rawText     String
  date        DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联字段
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  
  // AI分析相关字段
  aiConfidence Float?
  aiTags       String?
  aiMerchant   String?
  aiReasoning  String?
  aiUsage      String?
  
  @@map("expenses")
}
